name: Fuzz WebP with AFL++

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily

jobs:
  fuzz:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install AFL++
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev
        git clone https://github.com/AFLplusplus/AFLplusplus.git
        cd AFLplusplus
        make -j$(nproc)
        sudo make install
        cd ..

    - name: Install dependencies
      run: |
        sudo apt-get install -y autoconf automake libtool

    - name: Clone libwebp
      run: git clone https://github.com/webmproject/libwebp.git

    - name: Build libwebp with AFL++ and ASAN
      run: |
        cd libwebp
        ./autogen.sh
        AFL_USE_ASAN=1 CC=afl-clang-fast CXX=afl-clang-fast++ ./configure --disable-shared
        make -j$(nproc)
        cd ..

    - name: Write round trip harness
      run: |
        cat > harness.c <<'EOF'
        #include <stdio.h>
        #include <stdlib.h>
        #include <webp/decode.h>
        #include <webp/encode.h>

        int main() {
            uint8_t *data = NULL;
            size_t size = 0;
            size_t capacity = 0;

            // Read input from stdin
            while (!feof(stdin)) {
                if (size + 1024 > capacity) {
                    capacity = capacity ? capacity * 2 : 1024;
                    data = realloc(data, capacity);
                    if (!data) {
                        fprintf(stderr, "Memory allocation failed\n");
                        return 1;
                    }
                }
                size_t read = fread(data + size, 1, capacity - size, stdin);
                if (read == 0) break;
                size += read;
            }

            if (size == 0) {
                fprintf(stderr, "No input data\n");
                return 1;
            }

            // Decode WebP
            int width, height;
            uint8_t *decoded = WebPDecodeRGBA(data, size, &width, &height);
            free(data);
            if (!decoded) return 0;  // Silently ignore decode errors

            // Encode back to WebP
            uint8_t *encoded;
            size_t encoded_size = WebPEncodeRGBA(decoded, width, height, width * 4, 75.0f, &encoded);
            free(decoded);
            if (!encoded) return 0;

            // Decode again
            int width2, height2;
            uint8_t *decoded2 = WebPDecodeRGBA(encoded, encoded_size, &width2, &height2);
            free(encoded);
            if (decoded2) free(decoded2);

            return 0;
        }
        EOF

    - name: Compile harness
      run: |
        afl-clang-fast -Ilibwebp/src -fsanitize=address,undefined -o harness harness.c libwebp/src/.libs/libwebp.a -lm

    - name: Prepare initial corpus
      run: |
        mkdir -p input_corpus
        # Generate a simple WebP image using cwebp (from libwebp)
        convert -size 32x32 xc:white test.png  # Requires imagemagick
        libwebp/examples/cwebp -quiet test.png -o input_corpus/test.webp
        rm test.png

    - name: Run AFL++
      run: |
        afl-fuzz -i input_corpus -o output -m none -t 10000 -- ./harness @@

    - name: Upload findings
      if: always()
      uses: actions/upload-artifact
      with:
        name: afl++-findings
        path: output
